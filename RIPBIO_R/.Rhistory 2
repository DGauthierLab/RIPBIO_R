1 - pt(1:5, df = 1)
qt(.975, df = c(1:10,20,50,100,1000))
tt <- seq(0, 10, length.out = 21)
ncp <- seq(0, 6, length.out = 31)
ptn <- outer(tt, ncp, function(t, d) pt(t, df = 3, ncp = d))
t.tit <- "Non-central t - Probabilities"
image(tt, ncp, ptn, zlim = c(0,1), main = t.tit)
persp(tt, ncp, ptn, zlim = 0:1, r = 2, phi = 20, theta = 200, main = t.tit,
xlab = "t", ylab = "non-centrality parameter",
zlab = "Pr(T <= t)")
plot(function(x) dt(x, df = 3, ncp = 2), -3, 11, ylim = c(0, 0.32),
main = "Non-central t - Density", yaxs = "i")
plot(function(x) dt(x, df = 3), -3, 11, ylim = c(0, 0.32),
main = "Non-central t - Density", yaxs = "i")
plot(function(x) dt(x, df = 3), -4, 4, ylim = c(0, 0.7),
main = "Non-central t - Density", yaxs = "i")
x_dhyper <- seq(0, 4, by = 1)
# Apply dhyper function
y_dhyper <- dhyper(x_dhyper, m = 4, n = 4, k = 4)
# Plot dhyper values
barplot(y_dhyper, ylab = "Probability", xlab = "Successes", names.arg = c(0,1,2,3,4))
abline (h=0.05, col="red")
#Create a sequence of 100 equally spaced numbers between -4 and 4
x <- seq(-4, 4, length=100)
#create a vector of values that shows the height of the probability distribution
#for each value in x
y <- dnorm(x)
#plot x and y as a scatterplot with connected lines (type = "l") and add
#an x-axis with custom labels
plot(x,y, type = "l", lwd = 2, axes = FALSE, xlab = "", ylab = "")
axis(1, at = -3:3, labels = c("-3s", "-2s", "-1s", "mean", "1s", "2s", "3s"))
#generate normally distributed random numbers
pop1=rnorm(100,20)
pop2=rnorm(100,20)
tickwts <- cbind(pop1,pop2)
View(tickwts)
tickwts <- as_tibble(tickwts)
library(ggplot2)
library(tidyverse)
####Distributions####
x_dhyper <- seq(0, 4, by = 1)
# Apply dhyper function
y_dhyper <- dhyper(x_dhyper, m = 4, n = 4, k = 4)
# Plot dhyper values
barplot(y_dhyper, ylab = "Probability", xlab = "Successes", names.arg = c(0,1,2,3,4))
abline (h=0.05, col="red")
#Create a sequence of 100 equally spaced numbers between -4 and 4
x <- seq(-4, 4, length=100)
#create a vector of values that shows the height of the probability distribution
#for each value in x
y <- dnorm(x)
#plot x and y as a scatterplot with connected lines (type = "l") and add
#an x-axis with custom labels
plot(x,y, type = "l", lwd = 2, axes = FALSE, xlab = "", ylab = "")
axis(1, at = -3:3, labels = c("-3s", "-2s", "-1s", "mean", "1s", "2s", "3s"))
#generate normally distributed random numbers
pop1=rnorm(100,20)
pop2=rnorm(100,20)
tickwts <- cbind(pop1,pop2)
View(tickwts)
tickwts <- as_tibble(tickwts)
tickwts <- as_tibble(tickwts) %>%
pivot_longer(
everything(),
names_to = "population",
values_to = "weight_mg"
) %>%
arrange(population)
plot <- tickwts %>%
ggplot(aes(x=population,
y=weight)) +
geom_point(size = 3)
boxplot <- tickwts %>%
ggplot(aes(x=population,
y=weight)) +
geom_boxplot()
histo <- tickwts %>%
ggplot(aes(y=weight, color=population)) +
geom_histogram() +
coord_flip()
histo
#Create a sequence of 100 equally spaced numbers between -4 and 4
x <- seq(-4, 4, length=100)
#create a vector of values that shows the height of the probability distribution
#for each value in x
y <- dnorm(x)
#plot x and y as a scatterplot with connected lines (type = "l") and add
#an x-axis with custom labels
plot(x,y, type = "l", lwd = 2, axes = FALSE, xlab = "", ylab = "")
axis(1, at = -3:3, labels = c("-3s", "-2s", "-1s", "mean", "1s", "2s", "3s"))
#generate normally distributed random numbers
pop1=rnorm(100,20)
pop2=rnorm(100,20)
tickwts <- cbind(pop1,pop2)
View(tickwts)
tickwts <- as_tibble(tickwts)
tickwts <- as_tibble(tickwts) %>%
pivot_longer(
everything(),
names_to = "population",
values_to = "weight_mg"
) %>%
arrange(population)
plot <- tickwts %>%
ggplot(aes(x=population,
y=weight_mg)) +
geom_point(size = 3)
boxplot <- tickwts %>%
ggplot(aes(x=population,
y=weight_mg)) +
geom_boxplot()
histo <- tickwts %>%
ggplot(aes(y=weight_mg, color=population)) +
geom_histogram() +
coord_flip()
histo
ggplot(tickwts, aes(x = (weight_mg),
y = after_stat(density),
color=population)) +
geom_histogram(alpha =0.5) +
geom_density(
size = 2) +
geom_vline(xintercept=mean(pop1), color="red") +
geom_vline(xintercept=mean(pop2), color="blue")
t.test(pop1,pop2)
plot(function(x) dt(x, df = 3), -4, 4, ylim = c(0, 0.7),
main = "Non-central t - Density", yaxs = "i")
abline(v=-1.1116)
pop1=rnorm(100,20,1)
pop2=rnorm(100,20,2)
tickwts <- cbind(pop1,pop2)
View(tickwts)
tickwts <- as_tibble(tickwts)
tickwts <- as_tibble(tickwts) %>%
pivot_longer(
everything(),
names_to = "population",
values_to = "weight_mg"
) %>%
arrange(population)
plot <- tickwts %>%
ggplot(aes(x=population,
y=weight_mg)) +
geom_point(size = 3)
boxplot <- tickwts %>%
ggplot(aes(x=population,
y=weight_mg)) +
geom_boxplot()
histo <- tickwts %>%
ggplot(aes(y=weight_mg, color=population)) +
geom_histogram() +
coord_flip()
histo
ggplot(tickwts, aes(x = (weight_mg),
y = after_stat(density),
color=population)) +
geom_histogram(alpha =0.5) +
geom_density(
size = 2) +
geom_vline(xintercept=mean(pop1), color="red") +
geom_vline(xintercept=mean(pop2), color="blue")
t.test(pop1,pop2)
pwr.t.test(100,0.1,0.05)
abline(v=1.7328)
plot(function(x) dt(x, df = 3), -4, 4, ylim = c(0, 0.7),
main = "t-distribution", yaxs = "i")
abline(v=1.7328)
library(pwr)
install.packages("pwr")
library(pwr)
abline(v=-2,2)
abline(v=-2, color="green")
?abline
abline(v=-2, col="green")
abline(v=c(-2,2) col="green")
abline(v=c(2,col="green"))
plot(function(x) dt(x, df = 3), -4, 4, ylim = c(0, 0.7),
main = "t-distribution", yaxs = "i")
abline(v=c(-2, col="green"))
abline(v=c(2,col="green"))
plot(function(x) dt(x, df = 3), -4, 4, ylim = c(0, 0.7),
main = "t-distribution", yaxs = "i")
abline(v=-2, col="green"))
plot(function(x) dt(x, df = 3), -4, 4, ylim = c(0, 0.7),
main = "t-distribution", yaxs = "i")
abline(v=-2, col="green")
abline(v=2,col="green")
abline(v=1.7328)
ttest <- t.test(pop1,pop2)
tstat <- ttest$statistic
plot(function(x) dt(x, df = 3), -4, 4, ylim = c(0, 0.7),
main = "t-distribution", yaxs = "i")
abline(v=-2, col="green")
abline(v=2,col="green")
abline(v=tstat)
#generate normally distributed random numbers
pop1=rnorm(100,21,1)
pop2=rnorm(100,20,2)
tickwts <- cbind(pop1,pop2)
View(tickwts)
tickwts <- as_tibble(tickwts)
tickwts <- as_tibble(tickwts) %>%
pivot_longer(
everything(),
names_to = "population",
values_to = "weight_mg"
) %>%
arrange(population)
plot <- tickwts %>%
ggplot(aes(x=population,
y=weight_mg)) +
geom_point(size = 3)
boxplot <- tickwts %>%
ggplot(aes(x=population,
y=weight_mg)) +
geom_boxplot()
histo <- tickwts %>%
ggplot(aes(y=weight_mg, color=population)) +
geom_histogram() +
coord_flip()
histo
ggplot(tickwts, aes(x = (weight_mg),
y = after_stat(density),
color=population)) +
geom_histogram(alpha =0.5) +
geom_density(
size = 2) +
geom_vline(xintercept=mean(pop1), color="red") +
geom_vline(xintercept=mean(pop2), color="blue")
ttest <- t.test(pop1,pop2)
tstat <- ttest$statistic
pwr.t.test(100,0.1,0.05)
plot(function(x) dt(x, df = 3), -4, 4, ylim = c(0, 0.7),
main = "t-distribution", yaxs = "i")
abline(v=-2, col="green")
abline(v=2,col="green")
abline(v=tstat)
ttest
tstat
#generate normally distributed random numbers
pop1=rnorm(100,20.2,1)
pop2=rnorm(100,20,2)
tickwts <- cbind(pop1,pop2)
View(tickwts)
tickwts <- as_tibble(tickwts)
tickwts <- as_tibble(tickwts) %>%
pivot_longer(
everything(),
names_to = "population",
values_to = "weight_mg"
) %>%
arrange(population)
plot <- tickwts %>%
ggplot(aes(x=population,
y=weight_mg)) +
geom_point(size = 3)
boxplot <- tickwts %>%
ggplot(aes(x=population,
y=weight_mg)) +
geom_boxplot()
histo <- tickwts %>%
ggplot(aes(y=weight_mg, color=population)) +
geom_histogram() +
coord_flip()
histo
ggplot(tickwts, aes(x = (weight_mg),
y = after_stat(density),
color=population)) +
geom_histogram(alpha =0.5) +
geom_density(
size = 2) +
geom_vline(xintercept=mean(pop1), color="red") +
geom_vline(xintercept=mean(pop2), color="blue")
ttest <- t.test(pop1,pop2)
ttest
tstat <- ttest$statistic
tstat
pwr.t.test(100,0.1,0.05)
plot(function(x) dt(x, df = 3), -4, 4, ylim = c(0, 0.7),
main = "t-distribution", yaxs = "i")
abline(v=-2, col="green")
abline(v=2,col="green")
abline(v=tstat)
#generate normally distributed random numbers
pop1=rnorm(100,20.5,1)
pop2=rnorm(100,20,2)
tickwts <- cbind(pop1,pop2)
View(tickwts)
tickwts <- as_tibble(tickwts)
tickwts <- as_tibble(tickwts) %>%
pivot_longer(
everything(),
names_to = "population",
values_to = "weight_mg"
) %>%
arrange(population)
plot <- tickwts %>%
ggplot(aes(x=population,
y=weight_mg)) +
geom_point(size = 3)
boxplot <- tickwts %>%
ggplot(aes(x=population,
y=weight_mg)) +
geom_boxplot()
histo <- tickwts %>%
ggplot(aes(y=weight_mg, color=population)) +
geom_histogram() +
coord_flip()
histo
ggplot(tickwts, aes(x = (weight_mg),
y = after_stat(density),
color=population)) +
geom_histogram(alpha =0.5) +
geom_density(
size = 2) +
geom_vline(xintercept=mean(pop1), color="red") +
geom_vline(xintercept=mean(pop2), color="blue")
ttest <- t.test(pop1,pop2)
ttest
tstat <- ttest$statistic
tstat
pwr.t.test(100,0.1,0.05)
plot(function(x) dt(x, df = 3), -4, 4, ylim = c(0, 0.7),
main = "t-distribution", yaxs = "i")
abline(v=-2, col="green")
abline(v=2,col="green")
abline(v=tstat)
#generate normally distributed random numbers
pop1=rnorm(100,19.5,1)
pop2=rnorm(100,20,2)
tickwts <- cbind(pop1,pop2)
View(tickwts)
tickwts <- as_tibble(tickwts)
tickwts <- as_tibble(tickwts) %>%
pivot_longer(
everything(),
names_to = "population",
values_to = "weight_mg"
) %>%
arrange(population)
plot <- tickwts %>%
ggplot(aes(x=population,
y=weight_mg)) +
geom_point(size = 3)
boxplot <- tickwts %>%
ggplot(aes(x=population,
y=weight_mg)) +
geom_boxplot()
histo <- tickwts %>%
ggplot(aes(y=weight_mg, color=population)) +
geom_histogram() +
coord_flip()
histo
ggplot(tickwts, aes(x = (weight_mg),
y = after_stat(density),
color=population)) +
geom_histogram(alpha =0.5) +
geom_density(
size = 2) +
geom_vline(xintercept=mean(pop1), color="red") +
geom_vline(xintercept=mean(pop2), color="blue")
ttest <- t.test(pop1,pop2)
ttest
tstat <- ttest$statistic
tstat
pwr.t.test(100,0.1,0.05)
plot(function(x) dt(x, df = 3), -4, 4, ylim = c(0, 0.7),
main = "t-distribution", yaxs = "i")
abline(v=-2, col="green")
abline(v=2,col="green")
abline(v=tstat)
